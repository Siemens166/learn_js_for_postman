{
	"info": {
		"_postman_id": "1f907cf1-9b67-4b2c-997f-4f8f1ea1ba85",
		"name": "Users Demo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14368930"
	},
	"item": [
		{
			"name": "Регистрация пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Response body: JSON value check. Проверка, что в json ключу value вернулся error\r",
							"pm.test(\"Проверка ошибки типа\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.type).to.eql(\"error\");\r",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"email\": \"mails@mail.ru\",\r\n        \"name\": \"Riko\",\r\n        \"password\": \"1\",\r\n        \"companys\": [\"Front\", \"Back\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://users.bugred.ru/tasks/rest/doregister",
					"protocol": "http",
					"host": [
						"users",
						"bugred",
						"ru"
					],
					"path": [
						"tasks",
						"rest",
						"doregister"
					]
				}
			},
			"response": []
		},
		{
			"name": "Object keys Doregister",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"// console.log(jsonData);\r",
							"console.log(Object.keys(jsonData));\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.type).to.eql(\"error\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"email\": \"test1321s@mail.ru\",\r\n        \"name\": \"Nicks\",\r\n        \"password\": \"1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://users.bugred.ru/tasks/rest/doregister",
					"protocol": "http",
					"host": [
						"users",
						"bugred",
						"ru"
					],
					"path": [
						"tasks",
						"rest",
						"doregister"
					]
				}
			},
			"response": []
		},
		{
			"name": "Достать значения из JSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// pm.test(\"Your test name\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.type).to.eql(\"error\");\r",
							"//     console.log(jsonData)\r",
							"// });\r",
							" \r",
							"//\r",
							"    var jsonData = pm.response.json();\r",
							"    console.log(jsonData);\r",
							"    console.log(jsonData.message);\r",
							"    console.log(jsonData[\"message\"]);\r",
							"    console.log(jsonData['message']);\r",
							" \r",
							" // Доставали из массива значение mama\r",
							" /*\r",
							" mixData = [10,\r",
							"\t\"Pussy\",\r",
							"\t{ name: \"Kitty\", year: 3 },\r",
							"\t[\"мяу\", \"мур\", \"РррР\",\r",
							"\t\t{\r",
							"\t\t\tname: \"Lucky\", year: 3,\r",
							"\t\t\tfamily: [\"mama\", \"papa\"]\r",
							"\t\t}\r",
							"\t]\r",
							"]\r",
							"\r",
							"console.log(mixData[3][3].family[0]);\r",
							"*/"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"email\": \"test132s@mail.ru\",\r\n        \"name\": \"Nick\",\r\n        \"password\": \"1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://users.bugred.ru/tasks/rest/doregister",
					"protocol": "http",
					"host": [
						"users",
						"bugred",
						"ru"
					],
					"path": [
						"tasks",
						"rest",
						"doregister"
					]
				}
			},
			"response": []
		},
		{
			"name": "Chai.js",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"}); \r",
							"// STATUS CODE Successful POST request //С каким статус кодом тест будет pass\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
							"});\r",
							"// Status code Code name has striong // Какой ответ рядом со статусом\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"// Documentation Postam\r",
							"// Проверка если значение меньше указанного\r",
							"pm.test(\"Response time is less than 200ms\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"// Проверка если значение больше указанного\r",
							"pm.test(\"Response time is less than 200ms\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.above(201);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"//Chai official doc\r",
							"//Проверка, что статус не соответствует заданному\r",
							"pm.test(\"Status code is not 300\", function () {\r",
							"    pm.response.to.not.have.status(300);\r",
							"}); \r",
							"// Проверка, что статус код это строка\r",
							"pm.test(\"Status code is string\", function () {\r",
							"    pm.expect(pm.response.code).to.be.a('string');\r",
							"}); \r",
							"//Число больше или равно указанному\r",
							"pm.test(\"Status code больше либо равно\", function () {\r",
							"    pm.expect(pm.response.code).to.be.at.least(200);\r",
							"}); \r",
							"//Число меньше или равно указанному\r",
							"pm.test(\"Status code меньше либо равно\", function () {\r",
							"    pm.expect(pm.response.code).to.be.at.most(100);\r",
							"}); \r",
							"//Проверка диапазона чисел\r",
							"pm.test(\"Status code меньше либо равно\", function () {\r",
							"    pm.expect(pm.response.code).to.be.at.within(100,200);\r",
							"}); \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"test1132s@mail.ru\",\r\n    \"name\": \"Nicks\",\r\n    \"password\": \"1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://users.bugred.ru/tasks/rest/doregister",
					"protocol": "http",
					"host": [
						"users",
						"bugred",
						"ru"
					],
					"path": [
						"tasks",
						"rest",
						"doregister"
					]
				}
			},
			"response": []
		},
		{
			"name": "Дз",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"}); \r",
							"// STATUS CODE Successful POST request //С каким статус кодом тест будет pass\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
							"});\r",
							"// Status code Code name has striong // Какой ответ рядом со статусом\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"// Documentation Postam\r",
							"// Проверка если значение меньше указанного\r",
							"pm.test(\"Response time is less than 200ms\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"// Проверка если значение больше указанного\r",
							"pm.test(\"Response time is less than 200ms\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.above(201);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"//Chai official doc\r",
							"//Проверка, что статус не соответствует заданному\r",
							"pm.test(\"Status code is not 300\", function () {\r",
							"    pm.response.to.not.have.status(300);\r",
							"}); \r",
							"// Проверка, что статус код это строка\r",
							"pm.test(\"Status code is string\", function () {\r",
							"    pm.expect(pm.response.code).to.be.a('string');\r",
							"}); \r",
							"//Число больше или равно указанному\r",
							"pm.test(\"Status code больше либо равно\", function () {\r",
							"    pm.expect(pm.response.code).to.be.at.least(210);\r",
							"}); \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"email\": \"test132s@mail.ru\",\r\n        \"name\": \"Nick\",\r\n        \"password\": \"1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://users.bugred.ru/tasks/rest/doregister",
					"protocol": "http",
					"host": [
						"users",
						"bugred",
						"ru"
					],
					"path": [
						"tasks",
						"rest",
						"doregister"
					]
				}
			},
			"response": []
		},
		{
			"name": "Найти пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    var jsonData = pm.response.json();\r",
							"    console.log(jsonData);\r",
							"    console.log(jsonData.name);\r",
							"    console.log(jsonData[\"email\"]);\r",
							"    console.log(jsonData['password']);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"mails@mail.ru\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://users.bugred.ru/tasks/rest/getuserfull",
					"protocol": "http",
					"host": [
						"users",
						"bugred",
						"ru"
					],
					"path": [
						"tasks",
						"rest",
						"getuserfull"
					]
				}
			},
			"response": []
		},
		{
			"name": "Dadata.ru Подсказки: JSON в ответе",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// var jsonData = pm.response.json();\r",
							"// Object.keys(suggestions)\r",
							"\r",
							"// anna = jsonData.suggestions[0].value\r",
							"// console.log(anna)\r",
							"\r",
							"// anna_gender = jsonData.suggestions[0].data.gender;\r",
							"// console.log(anna_gender)\r",
							"\r",
							"// pm.test(\"Тут Анна\", function () {\r",
							"//     pm.expect(anna).to.eql(\"Анна\");\r",
							"// });\r",
							"\r",
							"    var mal = pm.response.json();\r",
							"    console.log(mal.suggestions[2].value);\r",
							"\r",
							"pm.test(\"Тут Андрей Малахов\", function () {\r",
							"    var mal = pm.response.json();\r",
							"    pm.expect(mal.suggestions[2].value).to.eql(\"Андрей Малахов\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "X-Secret",
						"value": "117ee85381bca6e54581b3ec64ab0ec98fdd2cd9",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Authorization",
						"value": "Token 6670fc9003d5fcc04e6229674c730113781a6924",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"query\": \"Андрей Мал\"\r\n}"
				},
				"url": {
					"raw": "https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/fio",
					"protocol": "https",
					"host": [
						"suggestions",
						"dadata",
						"ru"
					],
					"path": [
						"suggestions",
						"api",
						"4_1",
						"rs",
						"suggest",
						"fio"
					]
				}
			},
			"response": []
		},
		{
			"name": "Dadata.ru Подсказки: XML в ответе",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = xml2Json(responseBody);\r",
							"console.log(jsonData);\r",
							"anna = jsonData.SuggestResponse.suggestions[0].value\r",
							"console.log(anna)\r",
							"\r",
							"anna_gender = jsonData.SuggestResponse.suggestions[0].data.gender;\r",
							"console.log(anna_gender)\r",
							"\r",
							"pm.test(\"Тут Анна\", function () {\r",
							"    pm.expect(anna).to.eql(\"Анна\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "X-Secret",
						"value": "117ee85381bca6e54581b3ec64ab0ec98fdd2cd9",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Authorization",
						"value": "Token 6670fc9003d5fcc04e6229674c730113781a6924",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/xml",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"query\": \"Ан\",\r\n    \"gender\": \"female\"\r\n}"
				},
				"url": {
					"raw": "https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/fio",
					"protocol": "https",
					"host": [
						"suggestions",
						"dadata",
						"ru"
					],
					"path": [
						"suggestions",
						"api",
						"4_1",
						"rs",
						"suggest",
						"fio"
					]
				}
			},
			"response": []
		},
		{
			"name": "Поиск определенного значения в JSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    var jsonData = pm.response.json();\r",
							"    console.log(jsonData.companys[1]);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"mailis@mail.ru\",\r\n    \"name\": \"Rikos\",\r\n    \"companies\": [21, 22],\r\n    \"tasks\": [12]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://users.bugred.ru/tasks/rest/getuserfull",
					"protocol": "http",
					"host": [
						"users",
						"bugred",
						"ru"
					],
					"path": [
						"tasks",
						"rest",
						"getuserfull"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание компании",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"company_name\": \"Back\",\r\n  \"company_type\": \"ООО\",\r\n  \"company_users\": [\"mails@mail.ru\"],\r\n  \"email_owner\": \"aa+1@mail.com\"\r\n} ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://users.bugred.ru/tasks/rest/createcompany",
					"protocol": "http",
					"host": [
						"users",
						"bugred",
						"ru"
					],
					"path": [
						"tasks",
						"rest",
						"createcompany"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://reqres.in/ Создание пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    var jsonData = pm.response.json();\r",
							"    console.log(jsonData.total);\r",
							"    console.log(jsonData.data[4].first_name);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users?delay=3",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "delay",
							"value": "3"
						}
					]
				}
			},
			"response": []
		}
	]
}